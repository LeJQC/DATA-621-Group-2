train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv")
train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv", show_col_types = FALSE)
library(tidyverse)
library(psych)
library(corrplot)
train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv", show_col_types = FALSE)
View(train)
train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv", show_col_types = FALSE)
rownames(train) <- df$INDEX
View(train)
train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv", show_col_types = FALSE)
rownames(train) <- train$INDEX
train$INDEX <- NULL
sapply(df, function(x) sum(is.na(x)))
sapply(train, function(x) sum(is.na(x)))
train <- train %>% select(-TEAM_BATTING_HBP)
na_variables <- c("TEAM_BATTING_SO", "TEAM_BASERUN_SB", "TEAM_BASERUN_CS", "TEAM_PITCHING_SO", "TEAM_FIELDING_DP")
for (col in na_variables) {
median_value <- median(train[[col]], na.rm = TRUE)
train[[col]][is.na(train[[col]])] <- median_value
}
summary(df)
summary(train)
sapply(train, function(x) sum(is.na(x)))
# Assuming `model3` is your trained model and `evaluation_data` is your evaluation dataset
predictions <- predict(model3, newdata = evaluation_data)
knitr::opts_chunk$set(echo=FALSE,warning = FALSE, message = FALSE)
library(tidyverse)
library(psych)
library(corrplot)
df <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-training-data.csv", show_col_types = FALSE)
glimpse(df)
# Setting index column to index
rownames(df) <- df$INDEX
df$INDEX <- NULL
# Print summary table
summary_table <- describe(df)
print(round(summary_table,2))
df_long <- df %>%
pivot_longer(
cols = everything(),
names_to = "variable",
values_to = "value"
)
df_long %>%
ggplot(aes(value)) +
geom_density(fill = "blue") +
facet_wrap(~variable, scales ="free", ncol = 4) +
labs(x = element_blank(), y = element_blank())
df %>%
cor(use = "pairwise.complete.obs") %>%
corrplot(method = "color", type = "upper", tl.col = "black", diag = TRUE, number.cex = 0.5, addCoef.col = 'black', tl.srt = 50, col=colorRampPalette(c("#9c89b8","#f0a6ca","#b8bedd"))(200))
# Loop through columns
for (col_name in names(df)) {
missing <- is.na(df[[col_name]])
output <- paste(col_name,"missing values?",any(missing))
print(output)
}
# Checking for any missing values
sapply(df, function(x) sum(is.na(x)))
df <- df %>% select(-TEAM_BATTING_HBP)
na_variables <- c("TEAM_BATTING_SO", "TEAM_BASERUN_SB", "TEAM_BASERUN_CS", "TEAM_PITCHING_SO", "TEAM_FIELDING_DP")
for (col in na_variables) {
median_value <- median(df[[col]], na.rm = TRUE)
df[[col]][is.na(df[[col]])] <- median_value
}
summary(df)
#which(is.na(df))
# Count total missing values
print("Count of total missing values  ")
sum(is.na(df))
model <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_BB, data = df)
summary(model)
##Fit the multiple linear regression model
model2 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_BATTING_2B+0, data = df)
summary(model2)
layout(matrix(c(1,2,3,4),2,2))
plot(model2)
model3 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_BATTING_2B +  TEAM_PITCHING_H + TEAM_PITCHING_HR + TEAM_PITCHING_BB + 0, data = df)
summary(model3)
layout(matrix(c(1,2,3,4),2,2))
plot(model3)
model4 <- lm(TARGET_WINS ~ (TEAM_BATTING_H * TEAM_BATTING_BB* TEAM_BATTING_HR) + 0, data = df)
summary(model4)
layout(matrix(c(1,2,3,4),2,2))
plot(model4)
train <- read_csv("https://raw.githubusercontent.com/LeJQC/DATA-621-Group-2/main/HW1/moneyball-evaluation-data.csv", show_col_types = FALSE)
rownames(train) <- train$INDEX
train$INDEX <- NULL
train <- train %>% select(-TEAM_BATTING_HBP)
na_variables <- c("TEAM_BATTING_SO", "TEAM_BASERUN_SB", "TEAM_BASERUN_CS", "TEAM_PITCHING_SO", "TEAM_FIELDING_DP")
for (col in na_variables) {
median_value <- median(train[[col]], na.rm = TRUE)
train[[col]][is.na(train[[col]])] <- median_value
}
summary(train)
predictions <- predict(model3, newdata = evaluation_data)
predictions <- predict(model3, newdata = train)
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mae <- mean(abs(predictions - actual_values))
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("Mean Absolute Error: ", mae))
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
mae <- mean(abs(predictions - actual_values))
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("Mean Absolute Error: ", mae))
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mae <- mean(abs(predictions - actual_values))
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("Mean Absolute Error: ", mae))
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mae <- mean(abs(predictions - actual_values))
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("Mean Absolute Error: ", mae))
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
model1 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_BB, data = df)
summary(model1)
models <- list(model1, model2, model3,model4)  # replace with your actual models
names(models) <- c("Model 1", "Model 2", "Model 3")  # replace with your actual model names
# Function to calculate RMSE
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
# Evaluate models
for (name in names(models)) {
model <- models[[name]]
predictions <- predict(model, newdata = evaluation_data)
actual_values <- evaluation_data$TARGET_WINS  # replace with your actual response variable
cat(paste("\n", name, "\n"))
cat(paste("Adjusted R-squared: ", summary(model)$adj.r.squared, "\n"))
cat(paste("MSE: ", mean((predictions - actual_values)^2), "\n"))
cat(paste("RMSE: ", rmse(actual_values, predictions), "\n"))
}
models <- list(model1, model2, model3,model4)
names(models) <- c("Model 1", "Model 2", "Model 3", "Model 4")
# Function to calculate RMSE
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
# Evaluate models
for (name in names(models)) {
model <- models[[name]]
predictions <- predict(model, newdata = evaluation_data)
actual_values <- df$TARGET_WINS  # replace with your actual response variable
cat(paste("\n", name, "\n"))
cat(paste("Adjusted R-squared: ", summary(model)$adj.r.squared, "\n"))
cat(paste("MSE: ", mean((predictions - actual_values)^2), "\n"))
cat(paste("RMSE: ", rmse(actual_values, predictions), "\n"))
}
models <- list(model1, model2, model3,model4)
names(models) <- c("Model 1", "Model 2", "Model 3", "Model 4")
# Function to calculate RMSE
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
# Evaluate models
for (name in names(models)) {
model <- models[[name]]
predictions <- predict(model, newdata = df)
actual_values <- df$TARGET_WINS  # replace with your actual response variable
cat(paste("\n", name, "\n"))
cat(paste("Adjusted R-squared: ", summary(model)$adj.r.squared, "\n"))
cat(paste("MSE: ", mean((predictions - actual_values)^2), "\n"))
cat(paste("RMSE: ", rmse(actual_values, predictions), "\n"))
}
models <- list(model1, model2, model3,model4)
names(models) <- c("Model 1", "Model 2", "Model 3", "Model 4")
# Function to calculate RMSE
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
# Evaluate the models
for (name in names(models)) {
model <- models[[name]]
predictions <- predict(model, newdata = df)
actual_values <- df$TARGET_WINS
cat(paste("\n", name, "\n"))
cat(paste("Adjusted R-squared: ", summary(model)$adj.r.squared, "\n"))
cat(paste("RMSE: ", rmse(actual_values, predictions), "\n"))
}
models <- list(model1, model2, model3,model4)
names(models) <- c("Model 1", "Model 2", "Model 3", "Model 4")
# Function to calculate RMSE
rmse <- function(actual, predicted) {
sqrt(mean((actual - predicted)^2))
}
# Evaluate the models
for (name in names(models)) {
model <- models[[name]]
predictions <- predict(model, newdata = df)
actual_values <- df$TARGET_WINS
cat(paste("\n", name, "\n"))
cat(paste("Adjusted R-squared: ", summary(model)$adj.r.squared, "\n"))
cat(paste("MSE: ", mean((predictions - actual_values)^2), "\n"))
cat(paste("RMSE: ", rmse(actual_values, predictions), "\n"))
}
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("\n", "Model for Evaluation data", "\n")))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print(paste("\n", "Model for Evaluation data", "\n"))
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print("Model for Evaluation data")
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print("Evaluation data")
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
# Looking at the predicts based on our model
predictions <- predict(model3, newdata = train)
actual_values <- df$TARGET_WINS
mse <- mean((predictions - actual_values)^2)
rmse <- sqrt(mse)
print("Model 3: Evaluation data")
print(paste("Mean Squared Error: ", mse))
print(paste("Root Mean Squared Error: ", rmse))
